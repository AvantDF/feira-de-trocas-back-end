generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @unique @db.VarChar(50)
  items items[]
}

model items {
  id                                         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                       String      @db.VarChar(100)
  description                                String      @db.VarChar(1000)
  category_id                                String      @db.Uuid
  user_id                                    String      @db.Uuid
  categories                                 categories  @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_category")
  users                                      users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
  proposals_proposals_desired_item_idToitems proposals[] @relation("proposals_desired_item_idToitems")
  proposals_proposals_offered_item_idToitems proposals[] @relation("proposals_offered_item_idToitems")
}

model proposal_statuses {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String      @unique @db.VarChar(20)
  proposals proposals[]
}

model proposals {
  id                                     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offered_item_id                        String            @db.Uuid
  desired_item_id                        String            @db.Uuid
  proposed_by_id                         String            @db.Uuid
  status_id                              String            @db.Uuid
  items_proposals_desired_item_idToitems items             @relation("proposals_desired_item_idToitems", fields: [desired_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_desired_item")
  items_proposals_offered_item_idToitems items             @relation("proposals_offered_item_idToitems", fields: [offered_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_offered_item")
  users                                  users             @relation(fields: [proposed_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_proposed_by")
  proposal_statuses                      proposal_statuses @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String      @db.VarChar(100)
  email     String      @unique @db.VarChar(150)
  password  String      @db.VarChar(100)
  items     items[]
  proposals proposals[]
}
